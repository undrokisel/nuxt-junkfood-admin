generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  password String

  role UserRole @default(USER)

  // подтверждение пользователя
  // в т.ч. после аутентификации через соцсети (OAuth)
  verified DateTime?

  //для отслеживания пользователя, зашедшего через социальную сеть
  // пример, через гитхаб или gmail
  // todo: через ВК
  provider   String?
  providerId String?

  // связь: у одного пользователя 
  // может быть связь с одной корзиной
  // т.е. после оформления заказа корзины будут удаляться ?
  cart   Cart?
  // связь: у одного пользователя 
  // может быть много заказов
  orders Order[]

  // у одного пользователя может быть один код
  // по сути от этого зависит поле verified
  // опционально, потому что в момент создания юзер еще не имеет этого кода
  // код может быть запрошен позднее
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  imageUrl    String
  description String?

  // у одного продукта может быть только одна категория
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  // у одного продукта может быть
  // связь со многими ингридиентами
  ingredients Ingredient[]
  // у одного продукта может быть
  // связь со многими вариантами продукта
  variants    ProductVariant[]
  deletedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// вариация продукта (обязательно имеет цену
//  в зависимости от опциональных полей)
// размера, типа лаваша
// то есть главное в этой модели - привязка к цене, в зависимости от 
// какой либо вариации (размера, типа чето-то), 
// кроме ингридиентов, которые вынесены в отдельную модель
model ProductVariant {
  id Int @id @default(autoincrement())

  price     Int
  size      Int? // большой, малый, средний размер всего
  doughType Int? // варианты лаваша - сырный, томатный, обычный 

  // связь: один вариант имеет связь с одним продуктом
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  
  deletedAt DateTime?

  // связь: один вариант продукта может относиться к товарам из разных корзин
  cartItems CartItem[]
  // и заказов
  // временное решение: OrderItem не создавать, хранить товары заказа в Json
  // orderItems OrderItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  // связь: одна категория может иметь отношение к разным продуктам
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String @unique
  price    Int
  imageUrl String

  // связь: один ингредиент может иметь отношение к разным продуктам
  products  Product[]
  // связь: один ингредиент может находиться в разных (во многих) товарах корзин
  cartItems CartItem[]
  // и заказов
  // временное решение: OrderItem не создавать, хранить товары заказа в Json
  // orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// корзина
// содержит ссылку на пользователя
// состоит из многих сборок продуктов - cartItem
// содержит общую цену
// пользователь может иметь корзину без авторизации
// для этого на сессию будет выдаваться токен
model Cart {
  id Int @id @default(autoincrement())

  // связь: одна корзина принадлежит только одному пользователю
  // в анонимном случае, корзина может и не быть привязана к пользователю
  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  // связь: корзина может состоять из многих "продуктов в корзине"
  items CartItem[]

  // если есть токен, то значит корзина анонимная
  token String?

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// "продукт в корзине".
// ссылается на "конкретную корзину"  и "кокретный товар", и имеет его количество.
// имеет набор ингедиентов и подсчитанную цену.
// по сути эта модель - это вариант продукта (и его цена)
// + набор ингридиентов и их цена
// и соответственно общая стоимость и количество таких продуктов
model CartItem {
  id Int @id @default(autoincrement())

  // связь: один продукт из корзины может относиться только к одной конкретной корзине
  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  // связь: один продукт из корзины может иметь только один 
  // productVariant имеющий свою цену
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  // количество штук продукта конкретного варианта в заказе
  quantity Int @default(1)

  totalPrice Int @default(0)

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// заказ может создать также и анонимный пользователь
// в заказе может храниться информация о получателе, не совпадающая с данными пользователя
// по сути - информация для курьера/выдачи
model Order {
  id Int @id @default(autoincrement())

  // связь:  заказ принадлежит только одному пользователю
  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // заказ может создать также и анонимный пользователь
  // для связи с корзиной временное решение. 
  token String?

  // связь: заказ может состоять из многих "продуктов в заказе"
  // items OrderItem[]
  // временное решение: товары в заказе будут прямо сохранены в json
  // чтобы не прописывать связь с корзиной и cartItems
  // смысл в том, что товары в оформленном заказе уже не будут редактироваться
  items Json

  totalAmount Int @default(0)

  // статус оплаты
  status OrderStatus @default(PENDING)

  // статус оплаты
  delivery_status DeliveryStatus @default(PENDING)

  // способ оплаты - картой - кэш
  // paymentType PaymentType

  // ссылка на оплату от сервиса приема платежей
  // необходимо также для кейсов возврата платежей 
  paymentId String?

  // способ получения - курьер - самовывоз
  // deliveryType DeliveryType

  // информация для выдачи/курьера
  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING //только создан, не оплачен
  PAYD
  CANCELLED
}

enum DeliveryStatus {
  PENDING //только создан, не оплачен
  FULLFILED
  CANCELLED
}

// enum DeliveryType {
//     DELIVERY
//     BYSELF
// }

// enum PaymentType {
//     CASH
//     CARD
// }

enum UserRole {
  ADMIN
  USER
}

model VerificationCode {
  id Int @id @default(autoincrement())

  // связь: один код принадлежит одному пользователю
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code      String
  // expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
}

// временно решение: чтобы не плодить таблицы, решено 
// пока сохранять состав заказа хранить в самом заказе в формате Json
// model OrderItem {

//     id Int @id @default(autoincrement())
// связь: один продукт из заказа может относиться только к одному заказу
//     order   Order @relation(fields: [orderId], references: [id])
//     orderId Int

//     // связь: один продукт из корзины может иметь только один 
//     // productVariant имеющий свою цену
//     productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
//     productVariantId Int

//     // количество штук продукта конкретного варианта в заказе
//     quantity Int @default(1)

//     totalPrice Int @default(0)

//     ingredients Ingredient[]
// }
model Story {
  id              Int          @id @default(autoincrement())
  previewImageUrl String
  items           StoryItem[]
  text            String?
  text_color      String?
  createdAt       DateTime     @default(now())
  objectFit       ObjectFit    @default(contain)
  imgPosition     ImgPosition  @default(top)
  textPosition    TextPosition @default(bottom)
  textSize        String?
}

enum ObjectFit {
  cover
  contain
}

enum TextPosition {
  top
  bottom
}

enum ImgPosition {
  top
  left
  right
  bottom
  center
}

model StoryItem {
  id         Int      @id @default(autoincrement())
  storyId    Int
  story      Story    @relation(fields: [storyId], references: [id])
  sourceUrl  String
  createdAt  DateTime @default(now())
  heading    String?
  subheading String?
}
